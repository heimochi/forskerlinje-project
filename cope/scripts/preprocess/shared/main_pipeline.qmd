---
title: "Preprocessing Pipeline"
format: html
execute:
echo: true
---

Description: This script sources shared helpers, loads and cleans each questionnaire 
(via `run_pipeline()`), and merges selected instruments into a single 
wide dataset (`merge_instruments()`) using respondent ID and context label.

```{r setup}
source("preprocess/shared/path.r")                                        # data_dir
source("preprocess/shared/utilities.r")                                   # small helpers
source("preprocess/shared/00_consent.R")                                  # load_consent()
source("preprocess/shared/01_filter.r")                                   # filter_clinical_data()
source("preprocess/shared/02_data_types.r")                               # data_types(), check_types()
source("preprocess/shared/03_merge.r", echo = TRUE, verbose = TRUE)       # merge_instruments()
source("preprocess/shared/04_handle_missing.r")                           # handle_missing(), ect.
source("preprocess/shared/05_quality_control.r")      

consent <- load_consent()
qes <- c("ATQ", "BAI", "BDI", "IIP", "MCQ", "PSWQ", "SCL", "REGT", "REGP") 
```

```{r}
run_pipeline <- function(q_name, load_path) {
  source(load_path)
  data <- get(q_name)
  data <- filter_clinical_data(data, consent_df = consent, verbose = FALSE)
  data <- data_types(data)

  print(summary(data))                    # check
  invisible(data)                         # return silently
}
```

```{r}
# filter
all_data <- setNames(
  lapply(qes, function(q) run_pipeline(q, paste0("preprocess/", tolower(q), ".r"))),
  qes
)
```

```{r}
# merge
merged_all <- merge_instruments(
  all_data,
  keys = c("respondent_id", "assessment_context_label", "treatment_id"),
  verbose = TRUE
)

print_merge_qc(merged_all)
```

```{r}
# missing data imputation
cleaned_all <- handle_missing(
  merged_all,
  max_missing_to_impute = 2,
  seed = 123
)

summarize_patient_counts(cleaned_all)
```

```{r}
# quality control imputation
qc <- attr(cleaned_all, "qc_impute")
str(qc, max.level = 1)

View(qc$excluded_keys)
View(qc$imputed_map)
# OOB errors (NRMSE for numeric, PFC for factor-like)
View(qc$oob)

# summary
print(qc_summary, n = Inf)

# generate plots to check imputed distributions
#qc_plot_var(cleaned_all, qc, "scl_psdi_t")
# qc_plot_var(cleaned_all, qc, "scl_pst_t")
# qc_plot_var(cleaned_all, qc, "atq_sum_prorated")
# qc_plot_var(cleaned_all, qc, "mcq_csc_prorated")

```
